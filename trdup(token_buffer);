STRTOD(3)                                                                                Linux Programmer's Manual                                                                                STRTOD(3)



NNAAMMEE
       strtod, strtof, strtold - convert ASCII string to floating-point number

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddlliibb..hh>>

       ddoouubbllee ssttrrttoodd((ccoonnsstt cchhaarr **_n_p_t_r,, cchhaarr ****_e_n_d_p_t_r));;
       ffllooaatt ssttrrttooff((ccoonnsstt cchhaarr **_n_p_t_r,, cchhaarr ****_e_n_d_p_t_r));;
       lloonngg ddoouubbllee ssttrrttoolldd((ccoonnsstt cchhaarr **_n_p_t_r,, cchhaarr ****_e_n_d_p_t_r));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssttrrttooff(), ssttrrttoolldd():
           _XOPEN_SOURCE >= 600 || _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L;
           or _c_c _-_s_t_d_=_c_9_9

DDEESSCCRRIIPPTTIIOONN
       The ssttrrttoodd(), ssttrrttooff(), and ssttrrttoolldd() functions convert the initial portion of the string pointed to by _n_p_t_r to _d_o_u_b_l_e, _f_l_o_a_t, and _l_o_n_g _d_o_u_b_l_e representation, respectively.

       The expected form of the (initial portion of the) string is optional leading white space as recognized by iissssppaaccee(3), an optional plus ('+') or minus sign ('-') and then either (i) a decimal num‚Äê
       ber, or (ii) a hexadecimal number, or (iii) an infinity, or (iv) a NAN (not-a-number).

       A _d_e_c_i_m_a_l _n_u_m_b_e_r consists of a nonempty sequence of decimal digits possibly containing a radix character (decimal point, locale-dependent, usually '.'), optionally followed by a decimal exponent.
       A decimal exponent consists of an 'E' or 'e', followed by an optional plus or minus sign, followed by a nonempty sequence of decimal digits, and indicates multiplication by a power of 10.

       A _h_e_x_a_d_e_c_i_m_a_l _n_u_m_b_e_r consists of a "0x" or "0X" followed by a nonempty sequence of hexadecimal digits possibly containing a radix character, optionally followed by a binary exponent.  A binary
       exponent consists of a 'P' or 'p', followed by an optional plus or minus sign, followed by a nonempty sequence of decimal digits, and indicates multiplication by a power of 2.  At least one of
       radix character and binary exponent must be present.

       An _i_n_f_i_n_i_t_y is either "INF" or "INFINITY", disregarding case.

       A _N_A_N is "NAN" (disregarding case) optionally followed by '(', a sequence of characters, followed by ')'.  The character string specifies in an implementation-dependent way the type of NAN.

RREETTUURRNN VVAALLUUEE
       These functions return the converted value, if any.

       If _e_n_d_p_t_r is not NULL, a pointer to the character after the last character used in the conversion is stored in the location referenced by _e_n_d_p_t_r.

       If no conversion is performed, zero is returned and the value of _n_p_t_r is stored in the location referenced by _e_n_d_p_t_r.

       If the correct value would cause overflow, plus or minus HHUUGGEE__VVAALL (HHUUGGEE__VVAALLFF, HHUUGGEE__VVAALLLL) is returned (according to the sign of the value), and EERRAANNGGEE is stored in _e_r_r_n_o.  If the correct value
       would cause underflow, zero is returned and EERRAANNGGEE is stored in _e_r_r_n_o.

EERRRROORRSS
       EERRAANNGGEE Overflow or underflow occurred.

CCOONNFFOORRMMIINNGG TTOO
       C89 describes ssttrrttoodd(), C99 describes the other two functions.

NNOOTTEESS
       Since 0 can legitimately be returned on both success and failure, the calling program should set _e_r_r_n_o to 0 before the call, and then determine if an error occurred by checking whether _e_r_r_n_o has a
       nonzero value after the call.

EEXXAAMMPPLLEE
       See the example on the ssttrrttooll(3) manual page; the use of the functions described in this manual page is similar.

SSEEEE AALLSSOO
       aattooff(3), aattooii(3), aattooll(3), ssttrrttooll(3), ssttrrttoouull(3)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, and information about reporting bugs, can be found at http://www.kernel.org/doc/man-pages/.



Linux                                                                                            2010-09-20                                                                                       STRTOD(3)
