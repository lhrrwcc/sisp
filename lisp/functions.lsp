(defun equal (x y) (= x y))
(defun first (x) (car x))
(defun rest (x) (cdr x))
(defun second (x) (car (cdr x)))
(defun third (x) (car (cdr (cdr x))))
(defun fourth (x) (nth 3 x))
(defun fifth (x) (nth 4 x))
(defun sixth (x) (nth 5 x))
(defun seventh (x) (nth 6 x))
(defun eighth (x) (nth 7 x))
(defun ninth (x) (nth 8 x))
(defun tenth (x) (nth 9 x))
(defun caar (x) (car (car x)))
(defun cadr (x) (car (cdr x)))
(defun cdar (x) (cdr (car x)))
(defun cddr (x) (cdr (cdr x)))
(defun caaar (x) (car (car (car x))))
(defun caadr (x) (car (car (cdr x))))
(defun cadar (x) (car (cdr (car x))))
(defun caddr (x) (car (cdr (cdr x))))
(defun cdaar (x) (cdr (car (car x))))
(defun cdadr (x) (cdr (car (cdr x))))
(defun cddar (x) (cdr (cdr (car x))))
(defun cdddr (x) (cdr (cdr (cdr x))))
(defun caaaar (x) (car (car (car (car x)))))
(defun caaadr (x) (car (car (car (cdr x)))))
(defun caadar (x) (car (car (cdr (car x)))))
(defun caaddr (x) (car (car (cdr (cdr x)))))
(defun cadaar (x) (car (cdr (car (car x)))))
(defun cadadr (x) (car (cdr (car (cdr x)))))
(defun caddar (x) (car (cdr (cdr (car x)))))
(defun cadddr (x) (car (cdr (cdr (cdr x)))))
(defun cdaaar (x) (cdr (car (car (car x)))))
(defun cdaadr (x) (cdr (car (car (cdr x)))))
(defun cdadar (x) (cdr (car (cdr (car x)))))
(defun cdaddr (x) (cdr (car (cdr (cdr x)))))
(defun cddaar (x) (cdr (cdr (car (car x)))))
(defun cddadr (x) (cdr (cdr (car (cdr x)))))
(defun cdddar (x) (cdr (cdr (cdr (car x)))))
(defun cddddr (x) (cdr (cdr (cdr (cdr x)))))

(defun nth (n l)
  (cond ((atomp l) l)
	((eq n 0) (car l))
	(T (nth (+ n -1) (cdr l)))))

(defun cond* (x)
  (cond ((set 'cond-r (eval (caar x)))
	 (cond ((cdar x) (progn* (cdar x)))
	       (T cond-r)))
	((cdr x) (cond* (cdr x)))
	(T NIL)))

(defun progn* (x)
    (cond ((cdr x) (eval (car x)) (progn* (cdr x)))
	  (T (eval (car x)))))

(defun subst (new old l)
  (cond ((atompp l) (cond ((eq l old) new) (T l)))
	(T (cons (subst new old (car l))
		 (subst new old (cdr l))))))

(defun append (x y)
  (cond ((null x) y)
	(T (cons (car x) (append (cdr x) y)))))

(defun member (x y)
  (and (not (null y))
       (or (equal x (car y)) (member x (cdr y)))))

(defun pair (x y)
  (cond ((and (null x) (null y)) NIL)
	((and (not (atomp x)) (not (atomp y)))
	 (cons (list (car x) (car y))
	       (pair (cdr x) (cdr y))))))

(defun assoc (x y)
  (cond ((null y) NIL)
	((eq (caar y) x) (car y))
	(T (assoc x (cdr y)))))

(defun sublis (x y)
  (cond ((atomp y) (_sublis x y))
	(T (cons (sublis x (car y)) (sublis x (cdr y))))))
(defun _sublis (x z)
  (cond ((null x) z)
	((eq (caar x) z) (cadar x))
	(T (_sublis (cdr x) z))))

(defun last (e)
  (cond ((atomp e) NIL)
	((null (cdr e)) (car e))
	(T (last (cdr e)))))

(defun reverse (x)
  (_reverse x NIL))
(defun _reverse (x y)
  (cond ((null x) y)
	(T (_reverse (cdr x) (cons (car x) y)))))

(defun remove (e l)
  (cond ((null l) NIL)
	((equal e (car l)) (remove e (cdr l)))
	(T (cons (car l) (remove e (cdr l))))))

(defun succ (x y)
  (cond ((or (null y) (null (cdr y))) NIL)
	((eq (car y) x) (cadr y))
	(T (succ x (cdr y)))))

(defun pred (x y)
  (cond ((or (null y) (null (cdr y))) NIL)
	((eq (cadr y) x) (car y))
	(T (pred x (cdr y)))))

(defun before (x y)
  (cond ((atomp x) NIL)
	((null (cdr x)) NIL)
	((equal (car x) y) NIL)
	((equal (cadr x) y) (cons (car x) NIL))
	(T (cons (car x) (before (cdr x) y)))))

(defun after (x y)
  (cond ((atomp x) NIL)
	((equal (car x) y) (cdr x))
	(T (after (cdr x) y))))

(defun union (x y)
  (cond ((null x) y)
	((member (car x) y) (union (cdr x) y))
	(T (cons (car x) (union (cdr x) y)))))

(defun intersection (x y)
  (cond ((null x) NIL)
	((member (car x) y)
	 (cons (car x) (intersection (cdr x) y)))
	(T (intersection (cdr x) y))))

(defun ldifference (in out)
  (cond ((null in) NIL)
	((member (car in) out) (ldifference (cdr in) out))
	(T (cons (car in) (ldifference (cdr in) out)))))

(defun subsetp (a b)
  (cond ((null a) T)
	((member (car a) b) (subsetp (cdr a) b))
	(T NIL)))

(defun samesetp (a b)
	(and (subsetp a b) (subsetp b a)))
